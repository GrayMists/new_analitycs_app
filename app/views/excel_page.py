# app/views/excel_page.py
import streamlit as st
import pandas as pd
import os, sys
PAGES_DIR = os.path.dirname(os.path.abspath(__file__))
APP_DIR = os.path.dirname(PAGES_DIR)
PROJECT_ROOT = os.path.dirname(APP_DIR)
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

from app.io.excel_reader import list_sheets, read_excel_bytes
from app.data.cleaners import clean_dataframe, apply_rename, reorder_others, to_numeric_wide
from app.data.transform import unpivot_long, group_by_drug_and_specialty, group_for_combo_chart
from app.charts.bars import bar_drug_vs_qty, bar_combo_category
from app.charts.filters import specialization_and_drug_filters
from app.io.supabase_client import init_supabase_client
from app.io.uploader import upload_doctor_points
# –í–∏–¥–∞–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –≤–∂–µ —î –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
from app.core.config import PIN_COLS, DROP_COLS, DEFAULT_HEADER_ROW
import re

# --- Auth guard: require login before viewing this page ---
def _require_login():
    user = st.session_state.get('auth_user')
    if not user:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
        st.stop()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_type = user.get('type', '').lower()
    if user_type != 'admin':
        st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        st.info("–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.")
        st.stop()

def show():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Excel —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    _require_login()

    st.title("üìä Excel —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = st.session_state.get('auth_user')
    if user:
        st.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.get('email', '–ù–µ–≤—ñ–¥–æ–º–∏–π')} | –¢–∏–ø: {user.get('type', '–ù–µ–≤—ñ–¥–æ–º–∏–π').upper()}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞—á –º—ñ–∂ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    content_type = st.radio(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:",
        ["üìä –ë–∞–ª–∏", "‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂—ñ"],
        horizontal=True,
        key="excel_content_selector"
    )
    
    st.divider()
    
    if content_type == "üìä –ë–∞–ª–∏":
        show_excel_content()
    else:
        show_upload_content()

def show_excel_content():
    """
    –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—É "–ë–∞–ª–∏" (Excel)
    """
    st.subheader("üìä –ü–µ—Ä–µ–≥–ª—è–¥ Excel —Ñ–∞–π–ª—ñ–≤ –∑ –±–∞–ª–∞–º–∏")

    # --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ---
    uploaded = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂ Excel-—Ñ–∞–π–ª", type=["xlsx"])

    if not uploaded:
        st.info("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª .xlsx –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        st.stop()

    with st.spinner("–ß–∏—Ç–∞—é —Ñ–∞–π–ª..."):
        # Always use first sheet and skip first 2 rows (header at row 2, i.e., third row)
        df = read_excel_bytes(uploaded.getvalue(), sheet_name=0, header_row=2)
        df = clean_dataframe(df)
        df = apply_rename(df)

        # –û–±—Ä—ñ–∑–∞—î–º–æ –ø–æ —è–∫—ñ—Ä–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ, —è–∫—â–æ —î
        anchor_col = "–ö—ñ–ª-—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∞"
        if anchor_col in df.columns:
            df = df.loc[:, :anchor_col]

        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ
        df = df.drop(columns=[col for col in DROP_COLS if col in df.columns], errors="ignore")

        # –§–æ—Ä–º—É—î–º–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        present_pins = [c for c in PIN_COLS if c in df.columns]
        df = reorder_others(df, present_pins)

        # –ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        df = to_numeric_wide(df)

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —É –¥–æ–≤–≥–∏–π —Ñ–æ—Ä–º–∞—Ç
        df_long = unpivot_long(df, id_cols=present_pins).reset_index(drop=True)
        df_long["–§–∞–π–ª"] = uploaded.name

        # Extract year and month from filename (allowing underscore or space between)
        match = re.search(r'(\d{4})[_ ](\d{2})', uploaded.name)
        if match:
            df_long["year"] = int(match.group(1))
            df_long["month"] = int(match.group(2))
        else:
            df_long["year"] = None
            df_long["month"] = None

    st.success(f"–ó—á–∏—Ç–∞–Ω–æ: {len(df):,} —Ä—è–¥–∫—ñ–≤ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

    # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É Supabase ---
    client = init_supabase_client()
    if client and not df_long.empty:
        if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ Supabase (doctor_points)"):
            inserted = upload_doctor_points(client, df_long, table_name="doctor_points")
            st.success(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {inserted} —Ä—è–¥–∫—ñ–≤ —É doctor_points")
    elif not client:
        st.info("–î–æ–¥–∞–π—Ç–µ SUPABASE_URL —Ç–∞ SUPABASE_KEY —É st.secrets –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É –±–∞–∑—É.")

    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
    st.subheader("–¢–∞–±–ª–∏—Ü—è (–¥–æ–≤–≥–∏–π —Ñ–æ—Ä–º–∞—Ç)")
    st.dataframe(df_long, use_container_width=True)

def show_upload_content():
    """
    –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±—É "–ü—Ä–æ–¥–∞–∂—ñ" (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
    """
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    from app.views.upload_page import show as show_upload
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    show_upload(show_title=False)

def show_excel_page():
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞: üìä Excel
    –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
    """
    show()