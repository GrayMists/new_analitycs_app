# app/pages/20_Upload_Sales.py
from __future__ import annotations

import os, sys, re
import streamlit as st
import pandas as pd

# --- –¥–æ–¥–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É —É sys.path ---
PAGES_DIR = os.path.dirname(os.path.abspath(__file__))
APP_DIR = os.path.dirname(PAGES_DIR)
PROJECT_ROOT = os.path.dirname(APP_DIR)
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

from app.utils import PRODUCTS_DICT
from app.io.supabase_client import init_supabase_client

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è supabase
supabase = init_supabase_client()


def normalize_address(address: str) -> str:
    """–ù–∞–¥—ñ–π–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—è–¥–∫–∞ –∞–¥—Ä–µ—Å–∏."""
    if not isinstance(address, str):
        address = str(address)
    address = address.replace("\xa0", " ")
    address = re.sub(r"\s+", " ", address)
    return address.lower().strip()


def get_golden_address(address: str, golden_map: dict) -> dict:
    """–ü–æ–≤–µ—Ä—Ç–∞—î golden-—Ä—è–¥–æ–∫ –∞–¥—Ä–µ—Å–∏, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É golden_map."""
    lookup_key = normalize_address(address)
    default_result = {"city": None, "street": None, "number": None, "territory": None}
    return golden_map.get(lookup_key, default_result)


def show():
    st.title("üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤")
    st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à Excel-—Ñ–∞–π–ª, –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ‚Äî –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω—ñ –π –≥–æ—Ç–æ–≤—ñ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É Supabase.")

    if supabase is None:
        st.error("‚ùå Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ st.secrets.")
        st.stop()

    # --- –¥–æ–≤—ñ–¥–Ω–∏–∫–∏ ---
    try:
        all_regions_data = supabase.table("region").select("*").execute().data or []
        all_clients_data = supabase.table("client").select("*").execute().data or []
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤: {e}")
        all_regions_data, all_clients_data = [], []

    if all_clients_data:
        client_map = {str(row.get("client")).strip(): row.get("new_client") for row in all_clients_data if row.get("client")}
    else:
        client_map = {}

    col1, col2 = st.columns(2)
    with col1:
        uploaded_file = st.file_uploader("1. –í–∏–±–µ—Ä—ñ—Ç—å Excel-—Ñ–∞–π–ª –∑ –∞–¥—Ä–µ—Å–∞–º–∏", type=["xlsx", "xls"], key="file_uploader")

    with col2:
        if all_regions_data:
            region_names = [r["name"] for r in all_regions_data]
            selected_region_name = st.selectbox("2. –û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:", region_names, key="region_selector")
        else:
            st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤.")
            selected_region_name = None

    if st.button("üöÄ –û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ñ–∞–π–ª", type="primary", key="process_button"):
        if uploaded_file is not None and selected_region_name is not None:
            try:
                df = pd.read_excel(uploaded_file)
                required_columns = ["–†–µ–≥—ñ–æ–Ω", "–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–ö–ª—ñ—î–Ω—Ç"]
                if not all(c in df.columns for c in required_columns):
                    st.error(f"–ü–æ–º–∏–ª–∫–∞: —É —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_columns)}")
                    st.stop()

                df_filtered = df[df["–†–µ–≥—ñ–æ–Ω"] == selected_region_name].copy()
                if df_filtered.empty:
                    st.warning(f"–ù–µ–º–∞—î —Ä—è–¥–∫—ñ–≤ –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É {selected_region_name}.")
                    st.stop()

                # —à—É–∫–∞—î–º–æ ID —Ä–µ–≥—ñ–æ–Ω—É
                region_id = next((r["id"] for r in all_regions_data if r["name"] == selected_region_name), None)
                if region_id is None:
                    st.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–µ–≥—ñ–æ–Ω—É.")
                    st.stop()

                # golden addresses
                golden_map = {}
                try:
                    response = supabase.table("golden_addres").select("*").eq("region_id", region_id).execute()
                    for row in response.data or []:
                        if row.get("–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"):
                            golden_map[normalize_address(row["–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"])] = {
                                "city": row.get("–ú—ñ—Å—Ç–æ"),
                                "street": row.get("–í—É–ª–∏—Ü—è"),
                                "number": str(row.get("–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É")) if row.get("–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É") is not None else None,
                                "territory": row.get("–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è"),
                            }
                except Exception as e:
                    st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ golden addresses: {e}")

                parsed_addresses = df_filtered["–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"].apply(get_golden_address, golden_map=golden_map)
                parsed_df = pd.json_normalize(parsed_addresses)
                parsed_df = parsed_df.rename(
                    columns={"city": "City", "street": "Street", "number": "House_Number", "territory": "Territory"}
                )

                df_filtered.reset_index(drop=True, inplace=True)
                parsed_df.reset_index(drop=True, inplace=True)
                result_df = pd.concat([df_filtered, parsed_df], axis=1)

                # –¥–æ–¥–∞—î–º–æ –¥–∞—Ç—É –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É (yyyy_mm_dd –∞–±–æ yyyy_mm)
                date_match = re.search(r"(\\d{4}_\\d{2}(_\\d{2})?)", uploaded_file.name)
                if date_match:
                    parts = date_match.group(0).split("_")
                    result_df["year"] = parts[0]
                    result_df["month"] = parts[1]
                    result_df["decade"] = parts[2] if len(parts) > 2 else None
                    result_df["adding"] = date_match.group(0)
                else:
                    result_df["year"] = result_df["month"] = result_df["decade"] = result_df["adding"] = None

                # –≤–∏–∑–Ω–∞—á–∞—î–º–æ product_line –∑–∞ —Å–ª–æ–≤–Ω–∏–∫–æ–º
                result_df["Product_Line"] = result_df["–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è"].str[3:].map(PRODUCTS_DICT)

                # –º–∞–ø–∏–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
                if client_map:
                    result_df["new_client"] = result_df["–ö–ª—ñ—î–Ω—Ç"].astype(str).str.strip().map(client_map)
                else:
                    result_df["new_client"] = None

                st.session_state["upload_result_df"] = result_df
                st.success("‚úÖ –§–∞–π–ª –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ!")
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {e}")

    # –ø—ñ—Å–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
    if "upload_result_df" in st.session_state:
        df = st.session_state["upload_result_df"]
        st.dataframe(df, use_container_width=True)

        unmatched_df = df[df["City"].isna()]
        if not unmatched_df.empty:
            st.subheader("‚ö†Ô∏è –ê–¥—Ä–µ—Å–∏, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ golden")
            st.dataframe(unmatched_df[["–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"]])

        if st.button("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É Supabase", key="upload_button"):
            with st.spinner("–í—Å—Ç–∞–≤–∫–∞ —É Supabase..."):
                try:
                    upload_df = df.rename(
                        columns={
                            "–î–∏—Å—Ç—Ä–∏–±'—é—Ç–æ—Ä": "distributor",
                            "–†–µ–≥—ñ–æ–Ω": "region",
                            "–ú—ñ—Å—Ç–æ": "city_xls",
                            "–Ñ–î–†–ü–û–£": "edrpou",
                            "–ö–ª—ñ—î–Ω—Ç": "client",
                            "–Æ—Ä. –∞–¥—Ä–µ—Å–∞ –∫–ª—ñ—î–Ω—Ç–∞": "client_legal_address",
                            "–§–∞–∫—Ç.–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏": "delivery_address",
                            "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": "product_name",
                            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": "quantity",
                            "adding": "adding",
                            "City": "city",
                            "Street": "street",
                            "House_Number": "house_number",
                            "Territory": "territory",
                            "Product_Line": "product_line",
                            "year": "year",
                            "month": "month",
                            "decade": "decade",
                            "new_client": "new_client",
                        }
                    )
                    cols = [
                        "distributor",
                        "region",
                        "city_xls",
                        "edrpou",
                        "client",
                        "client_legal_address",
                        "delivery_address",
                        "product_name",
                        "quantity",
                        "adding",
                        "city",
                        "street",
                        "house_number",
                        "territory",
                        "product_line",
                        "year",
                        "month",
                        "decade",
                        "new_client",
                    ]
                    final_upload_df = upload_df[[c for c in cols if c in upload_df.columns]]
                    final_upload_df = final_upload_df.where(pd.notna(final_upload_df), None)
                    data_to_insert = final_upload_df.to_dict(orient="records")

                    resp = supabase.table("sales_data").insert(data_to_insert).execute()
                    if resp.data:
                        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(resp.data)} —Ä—è–¥–∫—ñ–≤.")
                    else:
                        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: {resp.error if hasattr(resp, 'error') else '–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}")
                except Exception as e:
                    st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —É Supabase: {e}")


# –≤–∏–∫–ª–∏–∫ –¥–ª—è Streamlit
if __name__ == "__main__":
    show()
else:
    show()