from dataclasses import dataclass
from typing import List, Dict
import os
import streamlit as st
try:
    import tomllib  # Python 3.11+
except Exception:  # pragma: no cover
    tomllib = None

# ---------------------------
# Supabase –∫–æ–Ω—Ñ—ñ–≥
# ---------------------------
@dataclass
class SupabaseConf:
    url: str | None
    key: str | None


def get_supabase_conf() -> SupabaseConf:
    """
    –ß–∏—Ç–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Supabase –∑—ñ st.secrets.
    
    –û—á—ñ–∫—É—î —Å–µ–∫—Ü—ñ—é [supabase] –∑ –∫–ª—é—á–∞–º–∏ SUPABASE_URL —Ç–∞ SUPABASE_KEY:
    
    [supabase]
    SUPABASE_URL = "your_supabase_url"
    SUPABASE_KEY = "your_service_or_anon_key"
    
    –ü–æ–≤–µ—Ä—Ç–∞—î SupabaseConf –∑ url —Ç–∞ key –∞–±–æ None, —è–∫—â–æ –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.
    """
    try:
        # 1) –û—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ: —Å–µ–∫—Ü—ñ—è [supabase]
        supa = st.secrets.get("supabase", {})
        url = supa.get("SUPABASE_URL")
        key = supa.get("SUPABASE_KEY")

        # 2) –†–µ–∑–µ—Ä–≤: –≤–µ—Ä—Ö–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å st.secrets (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Å–µ–∫—Ü—ñ—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
        if not url:
            url = st.secrets.get("SUPABASE_URL")
        if not key:
            key = st.secrets.get("SUPABASE_KEY")

        # 3) –†–µ–∑–µ—Ä–≤: –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
        if not url:
            url = os.environ.get("SUPABASE_URL")
        if not key:
            key = os.environ.get("SUPABASE_KEY")

        # 4) –†–µ–∑–µ—Ä–≤: –ø—Ä—è–º–µ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É .streamlit/secrets.toml –∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É
        secrets_path = None
        if (not url or not key) and tomllib is not None:
            try:
                # app/core/config.py -> app/core -> app -> PROJECT_ROOT
                current_dir = os.path.dirname(os.path.abspath(__file__))
                app_dir = os.path.dirname(current_dir)
                project_root = os.path.dirname(app_dir)
                secrets_path = os.path.join(project_root, ".streamlit", "secrets.toml")
                if os.path.exists(secrets_path):
                    with open(secrets_path, "rb") as f:
                        parsed = tomllib.load(f)  # type: ignore[arg-type]
                    file_supa = parsed.get("supabase", {}) if isinstance(parsed, dict) else {}
                    if not url:
                        url = (file_supa.get("SUPABASE_URL")
                               or parsed.get("SUPABASE_URL"))
                    if not key:
                        key = (file_supa.get("SUPABASE_KEY")
                               or parsed.get("SUPABASE_KEY"))
            except Exception as _:
                pass

        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤
        if not url or not key:
            st.error(
                f"""
            üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ–∫—Ä–µ—Ç—ñ–≤:
            - –í—Å—ñ —Å–µ–∫—Ä–µ—Ç–∏ (Streamlit): {dict(st.secrets)}
            - –°–µ–∫—Ü—ñ—è supabase (Streamlit): {supa}
            - SUPABASE_URL: {url}
            - SUPABASE_KEY: {'–ó–ù–ê–ô–î–ï–ù–û' if bool(key) else '–ù–ï –ó–ù–ê–ô–î–ï–ù–û'}

            –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–∂–µ—Ä–µ–ª:
            1) .streamlit/secrets.toml –∑ —Å–µ–∫—Ü—ñ—î—é [supabase]
               SUPABASE_URL = "your_url"
               SUPABASE_KEY = "your_key"
            2) –ê–ë–û –≤–µ—Ä—Ö–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å secrets (–±–µ–∑ —Å–µ–∫—Ü—ñ—ó) –∑ —Ç–∏–º–∏ –∂ –∫–ª—é—á–∞–º–∏
            3) –ê–ë–û –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è SUPABASE_URL / SUPABASE_KEY
            4) –§–∞–π–ª –ø—Ä–æ—î–∫—Ç—É .streamlit/secrets.toml (—á–∏—Ç–∞–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É) ‚Äî –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î —Ç—É—Ç:
               {secrets_path if 'secrets_path' in locals() else '<project_root>/.streamlit/secrets.toml'}
            –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:
            - CWD (os.getcwd): {os.getcwd()}
            - tomllib –¥–æ—Å—Ç—É–ø–Ω–∏–π: {bool(tomllib)}
            - –Ü—Å–Ω—É–≤–∞–Ω–Ω—è secrets_path: {os.path.exists(secrets_path) if secrets_path else None}
            """
            )

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤: {e}")
        url, key = None, None

    return SupabaseConf(url=url, key=key)

# ---------------------------
# –ë–∞–∑–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ / –¥–µ—Ñ–æ–ª—Ç–∏
# ---------------------------
DEFAULT_SHEET_NAME: str | None = None   # None = –ø–µ—Ä—à–∏–π –∞—Ä–∫—É—à
DEFAULT_HEADER_ROW: int = 2             # 0-based (—Ç–æ–±—Ç–æ 3-–π —Ä—è–¥–æ–∫ —É Excel)
SUPABASE_INSERT_BATCH: int = 500

# ---------------------------
# –ë—ñ–∑–Ω–µ—Å-–∫–æ–ª–æ–Ω–∫–∏
# ---------------------------
PIN_COLS: List[str] = [
    "–†–µ–≥—ñ–æ–Ω",
    "–ú.–ü.",
    "–û–±–ª–∞—Å—Ç—å",
    "–ú—ñ—Å—Ç–æ",
    "–õ–ü–ó",
    "–í—É–ª–∏—Ü—è",
    "‚Ññ –±—É–¥–∏–Ω–∫—É",
    "–ü.–Ü.–ë. –ª—ñ–∫–∞—Ä—è",
    "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è",
    "–§–æ—Ä–º–∞",
    "–í–∏–¥–∞—á–∞ –±–∞–ª—ñ–≤",
    "–°—É–º–∞ –ë–∞–ª—ñ–≤ (–ø–æ—Ç–æ—á.–º—ñ—Å.)",
    "–ù–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å",
    "–í–∏–¥–∞—á–∞ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å",
    "–ó–∞–ª–∏—à–æ–∫ –ù–∞–∫–æ–ø–∏—á–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç.–º—ñ—Å.",
    "–ê–≤–∞–Ω—Å",
    "–ó–∞–ª–∏—à–æ–∫ –Ω–∞ –Ω–∞—Å—Ç. –º—ñ—Å.",
    "–ö—ñ–ª-—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∞",
]

DROP_COLS: List[str] = [
    "–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –ª—ñ–∫–∞—Ä—è",
    "–ù–æ–º–µ—Ä",
    "–ù–∞–∑–≤–∞",
    "–ü–Ü–ë",
    "–ö–æ–º–µ–Ω—Ç–∞—Ä",
]

# –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è ¬´–¥–æ–≤–≥–∏—Ö¬ª –Ω–∞–∑–≤ —É –∫–æ—Ä–æ—Ç–∫—ñ
RENAME_MAP: Dict[str, str] = {
    "–†–µ–≥—ñ–æ–Ω (–≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É)": "–†–µ–≥—ñ–æ–Ω",
    "–ú.–ü. (–≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É)": "–ú.–ü.",
    "–û–±–ª–∞—Å—Ç—å (–≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É)": "–û–±–ª–∞—Å—Ç—å",
    "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è (–≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É)": "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ–∫–∞—Ä—è",
    "–§–æ—Ä–º–∞ (–≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É)": "–§–æ—Ä–º–∞",
    "–°—É–º–∞ –ë–∞–ª—ñ–≤ (–ø–æ—Ç–æ—á.–º—ñ—Å.) —Ä–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ": "–°—É–º–∞ –ë–∞–ª—ñ–≤ (–ø–æ—Ç–æ—á.–º—ñ—Å.)",
    "–ó–∞–ª–∏—à–æ–∫ –ù–∞–∫–æ–ø–∏—á–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç.–º—ñ—Å. (—Ä–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)": "–ó–∞–ª–∏—à–æ–∫ –ù–∞–∫–æ–ø–∏—á–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç.–º—ñ—Å.",
    "–ó–∞–ª–∏—à–æ–∫ –Ω–∞ –Ω–∞—Å—Ç. –º—ñ—Å. (—Ä–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)": "–ó–∞–ª–∏—à–æ–∫ –Ω–∞ –Ω–∞—Å—Ç. –º—ñ—Å.",
    "–ö—ñ–ª-—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫ (—Ä–∞—Ö. –∞–≤—Ç–æ–º–∞—Ç.)": "–ö—ñ–ª-—Å—Ç—å —É–ø–∞–∫–æ–≤–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∞",
}

# –ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —É ¬´—à–∏—Ä–æ–∫—ñ–π¬ª —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ —á–∏—Å–ª–∞
NUMERIC_WIDE_COLS: List[str] = [
    "–í–∏–¥–∞—á–∞ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—å",
    "–ê–≤–∞–Ω—Å",
    "–ó–∞–ª–∏—à–æ–∫ –ù–∞–∫–æ–ø–∏—á–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç.–º—ñ—Å.",
    "–ó–∞–ª–∏—à–æ–∫ –Ω–∞ –Ω–∞—Å—Ç. –º—ñ—Å.",
]