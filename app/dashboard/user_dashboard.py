# app/dashboard/user_dashboard.py
import streamlit as st
import datetime as dt
from app.io.supabase_client import init_supabase_client
from app.io import loader_sales as data_loader


def fetch_user_sales_independent(profile: dict):
    """
    –ù–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Sales:
    1) –∑—á–∏—Ç—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é (region_id, region, territory(tech), line),
    2) –≤–∏–∑–Ω–∞—á–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ (year, month, decade),
    3) —Ç—è–≥–Ω–µ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ data_loader.fetch_all_sales_data(...),
    4) –æ–±—Ä—ñ–∑–∞—î –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–æ –û–°–¢–ê–ù–ù–¨–û–á –î–ï–ö–ê–î–ò —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è,
    5) –ø–æ–≤–µ—Ä—Ç–∞—î (df_trim, meta) –±–µ–∑ –∂–æ–¥–Ω–∏—Ö side-effects.
    """
    client = init_supabase_client()
    if not client:
        raise RuntimeError("Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")

    # —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
    region_id = profile.get("region_id")
    region_name = profile.get("region")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –∑ –ø—Ä–æ—Ñ—ñ–ª—é, –Ω–∞–ø—Ä. '24. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å'
    if isinstance(region_name, str):
        region_name = region_name.strip()
    territory_tech = (profile.get("territory") or "").strip() or "–í—Å—ñ"   # —É –ø—Ä–æ—Ñ—ñ–ª—ñ –≤–∂–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –Ω–∞–∑–≤–∞
    line_param = (profile.get("line") or "–í—Å—ñ").strip() or "–í—Å—ñ"

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π –º—ñ—Å—è—Ü—å (–±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–µ–∫–∞–¥–æ—é)
    today = dt.date.today()
    current_year = today.year
    current_month = today.month
    months_param = [f"{current_month:02d}"]  # –ª–æ–∞–¥–µ—Ä –æ—á—ñ–∫—É—î —Ä—è–¥–∫–∏ "MM"

    # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ "—è–∫ –Ω–∞ Sales" (—Ç–æ–π —Å–∞–º–∏–π –ª–æ–∞–¥–µ—Ä, –∞–ª–µ —Ü–µ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∞–º–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
    df_loaded = data_loader.fetch_all_sales_data(
        region_name=region_name or None,   # –ª–æ–∞–¥–µ—Ä –ø—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É —Ä–µ–≥—ñ–æ–Ω—É (–Ω–µ id)
        territory=territory_tech,          # —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –Ω–∞–∑–≤–∞ –∞–±–æ "–í—Å—ñ"
        line=line_param,                   # "–í—Å—ñ"/"–õ—ñ–Ω—ñ—è 1"/"–õ—ñ–Ω—ñ—è 2"
        months=months_param
    )

    df_trim = df_loaded.copy()  # –∑–∞–ª–∏—à–∞—î–º–æ –≤–µ—Å—å –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å (—É—Å—ñ –¥–µ–∫–∞–¥–∏)

    meta = {
        "region_id": region_id,
        "region_name": region_name,
        "territory": territory_tech,
        "line": line_param,
        "period": {"year": current_year, "month": current_month, "decade": None},
        "months_param": months_param,
        "rows": int(len(df_trim)),
    }
    return df_trim, meta


def display_user_profile(user):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    st.success(f"–£–≤—ñ–π—à–ª–∏ —è–∫ {user['email']}")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ profiles
    if user.get('id'):
        client = init_supabase_client()
        if client:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ profiles –∑–∞ id
                result = client.table("profiles").select("*").eq("id", user['id']).execute()
                
                if result.data and len(result.data) > 0:
                    profile_data = result.data[0]
                    st.info(f"üë§ ID: {profile_data.get('id')}")
                    if profile_data.get('full_name'):
                        st.info(f"üë§ –ü–æ–≤–Ω–µ —ñ–º'—è: {profile_data.get('full_name')}")
                    if profile_data.get('email'):
                        st.info(f"üìß Email: {profile_data.get('email')}")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è –∑ profiles
                    st.subheader("üìã –î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ profiles:")
                    for key, value in profile_data.items():
                        if value is not None and key not in ['id', 'email', 'full_name']:
                            st.write(f"**{key}**: {value}")
                    
                    return profile_data
                else:
                    st.warning("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ profiles")
                    return None
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ profiles: {e}")
                return None
        else:
            st.error("Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return None
    else:
        st.warning("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None


def display_sales_data(profile_data, user):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not profile_data:
        return
    
    st.divider()
    st.subheader("–ù–µ–∑–∞–ª–µ–∂–Ω–∏–π –∑—Ä—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–∞–¥–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è)")

    # –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å (–∑–∞ email), —â–æ–± –º–∞—Ç–∏ region/territory/line/region_id/type/city
    client = init_supabase_client()
    profile_row = None
    try:
        if client:
            prof_q = client.table("profiles").select("*").eq("email", user['email']).limit(1).execute()
            profile_row = (prof_q.data or [None])[0]
    except Exception as e:
        st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")

    if profile_row:
        try:
            df_sales, meta = fetch_user_sales_independent(profile_row)
            st.caption(
                f"–§—ñ–ª—å—Ç—Ä–∏: —Ä–µ–≥—ñ–æ–Ω='{meta['region_name'] or '–í—Å—ñ'}' (id={meta['region_id']}), "
                f"—Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è='{meta['territory']}', –ª—ñ–Ω—ñ—è='{meta['line']}'."
            )
            p = meta['period']
            if p.get('decade') is not None:
                st.caption(f"–ü–µ—Ä—ñ–æ–¥: {p['year']}-{p['month']:02d}, –¥–µ–∫–∞–¥–∞ {p['decade']} ‚Ä¢ –†—è–¥–∫—ñ–≤: {meta['rows']:,}")
            else:
                st.caption(f"–ü–µ—Ä—ñ–æ–¥: {p['year']}-{p['month']:02d} ‚Ä¢ –†—è–¥–∫—ñ–≤: {meta['rows']:,}")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –≤–ª–∞—Å–Ω–∏–π state –¥–ª—è home (–ù–ï –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É Sales)
            st.session_state['home_sales_df'] = df_sales
            st.session_state['home_sales_meta'] = meta

            if df_sales is not None and not df_sales.empty:
                st.dataframe(df_sales.head(50), use_container_width=True)
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è: –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ product_name –∑ —Å—É–º–æ—é quantity
                if "product_name" in df_sales.columns and "quantity" in df_sales.columns:
                    grouped = (
                        df_sales.groupby("product_name", as_index=False)["quantity"]
                        .sum()
                        .sort_values("quantity", ascending=False)
                    )
                    st.subheader("–°—É–º–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º")
                    st.dataframe(grouped, use_container_width=True)
            else:
                st.info("–î–∞–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ –∑—Ä—ñ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ–≥–æ –∑—Ä—ñ–∑—É: {e}")
    else:
        st.info("–ü—Ä–æ—Ñ—ñ–ª—å (region/territory/line/region_id) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–ø–æ–≤–Ω–∏–π.")
